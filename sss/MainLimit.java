import java.io.File;import java.io.FileNotFoundException;import java.io.PrintWriter;import java.util.Scanner;public class MainLimit {    static float error=0;    public static void main(String[] args) throws FileNotFoundException {//        input    o o o o o o o o   k          784//                      W[kj]//        hidden      o o o o o o    j Biasj     74//                         W[ji]//        output         o o o o     i Biasi     10        //parameter        float rate=(float)0.05;        int section=5;        float limit=(float)0.001;        int leftBound=30000,rightBound=40000;        int inputNumber=784,hiddenNumber=74,outputNumber=10;        //input        int[] input=new int[inputNumber];        float[] hidden=new float[hiddenNumber];        float[] output=new float[outputNumber];        float[] standard=new float[outputNumber];        float[][] weightKj=new float[inputNumber][hiddenNumber];        float[][] weightJi=new float[hiddenNumber][outputNumber];        float[] biasJ=new float[hiddenNumber];        float[] biasI=new float[outputNumber];        float[][] adjustWeightKj=new float[inputNumber][hiddenNumber];        float[][] adjustWeightJi=new float[hiddenNumber][outputNumber];        float[] adjustBiasJ=new float[hiddenNumber];        float[] adjustBiasI=new float[outputNumber];        float[] adjustSoft=new float[outputNumber];        String BetterFileName="TestSave_95_5_6.txt";        //initial all        Initial initial=new Initial();        initial.addition(weightKj, weightJi, biasJ, biasI,inputNumber,hiddenNumber,outputNumber);        initial.adjust(adjustWeightKj, adjustWeightJi, adjustBiasJ, adjustSoft,adjustBiasI,inputNumber,hiddenNumber,outputNumber);        //initial betterData//        initial.betterData(weightKj,weightJi,biasJ,biasI,inputNumber,hiddenNumber,outputNumber,BetterFileName);        int test,outputNum,testNum=0;        Scanner inputFile;        Data data=new Data();        Renew renew=new Renew();        while (true) {            for (test = 1; test < 70000; test++) {                if (test>=leftBound && test<rightBound) continue;                //read input                inputFile = new Scanner(new File("dataset/" + test + ".txt"));                for (int i = 0; i < inputNumber; i++) {                    input[i] = inputFile.nextInt();                    if (input[i] > 0) input[i] = 1;                }                outputNum = inputFile.nextInt();                inputFile.close();                for (int i = 0; i < outputNumber; i++) {                    if (i == outputNum)                        standard[i] = 1;                    else                        standard[i] = 0;                }                initial.read(hidden, output,inputNumber,hiddenNumber,outputNumber);                //calc hidden layer                for (int j = 0; j < hiddenNumber; j++) {                    for (int k = 0; k < inputNumber; k++) {                        hidden[j] += input[k] * weightKj[k][j];                    }                    hidden[j] = sigm(hidden[j] + biasJ[j]);                }                //calc output layer                for (int i = 0; i < outputNumber; i++) {                    for (int j = 0; j < hiddenNumber; j++) {                        output[i] += hidden[j] * weightJi[j][i];                    }                    output[i] = sigm(output[i] + biasI[i]);                }                //softmax                float outputTotal=0;//                for (int i=0;i<outputNumber;i++)//                    outputTotal+=output[i];//                for (int i=0;i<outputNumber;i++)//                    output[i]=output[i]/outputTotal;                //check output                testNum++;                if (check(output, standard, testNum, limit, section,outputNumber)) {                    data.save(weightKj,weightJi,biasJ,biasI,inputNumber,hiddenNumber,outputNumber);                    return;                }                //adjust weight                for (int j = 0; j < hiddenNumber; j++) {                    for (int i = 0; i < outputNumber; i++) {                        adjustWeightJi[j][i] += rate * (standard[i] - output[i]) * output[i] * (1 - output[i]) * hidden[j];                    }                }                for (int k = 0; k < inputNumber; k++) {                    for (int j = 0; j < hiddenNumber; j++) {                        outputTotal = 0;                        for (int i = 0; i < outputNumber; i++) {                            outputTotal += (standard[i] - output[i]) * output[i] * (1 - output[i]) * weightJi[j][i];                        }                        adjustWeightKj[k][j] += rate * hidden[j] * (1 - hidden[j]) * input[k] * outputTotal;                    }                }                //adjust bias                for (int i = 0; i < outputNumber; i++) {                    adjustBiasI[i] += rate * (standard[i] - output[i]) * output[i] * (1 - output[i]);                }                for (int j = 0; j < hiddenNumber; j++) {                    outputTotal = 0;                    for (int i = 0; i < outputNumber; i++) {                        outputTotal += (standard[i] - output[i]) * output[i] * (1 - output[i]) * weightJi[j][i];                    }                    adjustBiasJ[j] += rate * hidden[j] * (1 - hidden[j]) * outputTotal;                }                //renew                if ((test + 1) % section == 0) {                    renew.weight(weightKj,weightJi,adjustWeightKj,adjustWeightJi,inputNumber,hiddenNumber,outputNumber);                    renew.bias(biasJ,biasI,adjustBiasJ,adjustBiasI,inputNumber,hiddenNumber,outputNumber);                    initial.adjust(adjustWeightKj, adjustWeightJi, adjustBiasJ, adjustBiasI,adjustSoft,inputNumber,hiddenNumber,outputNumber);                }            }        }    }    //sigm function    static float sigm(float x){        return (float)(1/(1+Math.exp(-x)));    }    //check output    static boolean check(float[] output,float[] standard,int testNum,float limit,int section,int outputNumber){        for (int i=0;i<outputNumber;i++){            error+=(standard[i]-output[i])*(standard[i]-output[i]);        }        if ((testNum+1)% section==0) {            error/=section;            System.out.println("Test " + testNum + ": " + "The average Error is " + error + " ");            if (error<limit) {                return true;            }            error=0;        }        return false;    }}